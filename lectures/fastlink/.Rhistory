install.packages("fastlink")
install.packages("fastLink")
library(fastLink)
# load RLdata500
library(blink)
head(RLdata500)
length(unique(records$ent_id))
records <- RLdata500
# load RLdata500
library(blink)
records <- RLdata500
head(RLdata500)
length(unique(records$ent_id))
length(unique(records$identity.RLdata500))
# load RLdata10000
read.csv(data/RLdata10000.csv)
# load RLdata10000
read.table(data/RLdata10000.csv)
# load RLdata10000
read.table(data/RLdata10000.csv)
# load RLdata10000
read.table("data/RLdata10000.csv")
# load RLdata10000
read.table("data/RLdata10000.csv", sep=",", header=TRUE)
head(records, 4)
# load RLdata10000
records <- read.table("data/RLdata10000.csv", sep=",", header=TRUE)
head(records, 4)
# Number of unique records
length(unique(records$ent_id))
out <- fastLink(dfA = records, dfB = records,
varnames = linkageFields,
stringdist.match = stringDistFields, # JW by default
partial.match = partialMatchFields,
cut.a = 0.94, cut.p = 0.84, # JW cutoffs
dedupe = FALSE # 1-to-1 match
)
linkageFields <- c("fname_c1", "lname_c1", "by", "bm", "bd")
# string distance fields
stringDistFields <- c("fname_c1", "lname_c1")
# partial distance fields (fields where we allow
# for agree, disagree, and partially agree)
partialMatchFields <- c("fname_c1", "lname_c1")
out <- fastLink(dfA = records, dfB = records,
varnames = linkageFields,
stringdist.match = stringDistFields, # JW by default
partial.match = partialMatchFields,
cut.a = 0.94, cut.p = 0.84, # JW cutoffs
dedupe = FALSE # 1-to-1 match
)
trueMembership <- records$ent_id
recordIds <- records$rec_id
numRecords <- dim(records)[1]
canonicalizePairs <- function(pairs) {
ID.x <- pairs[[1]]
ID.y <- pairs[[2]]
temp <- ID.x
ID.x <- ifelse(ID.x <= ID.y, ID.x, ID.y)
ID.y <- ifelse(temp <= ID.y, ID.y, temp)
pairs <- data.frame(ID.x = ID.x, ID.y = ID.y, stringsAsFactors = FALSE)
class(pairs) <- c("Pairs", class(pairs))
pairs
}
predMatches <- out$matches %>%
lapply(as.integer) %>%        # Use integer rather than numeric record ids
as.data.frame %>%             # Convert to data frame
filter(inds.a != inds.b) %>%  # Remove "self-matches" (since fastLink is not designed for deduplication)
canonicalizePairs
library(magrittr)
predMatches <- out$matches %>%
lapply(as.integer) %>%        # Use integer rather than numeric record ids
as.data.frame %>%             # Convert to data frame
filter(inds.a != inds.b) %>%  # Remove "self-matches" (since fastLink is not designed for deduplication)
canonicalizePairs
library(fastLink)
library(tidyverse)
library(data.table)
source("evaluationMetrics.R")
records <- read_csv("../datasets/RLdata500.csv")
trueMembership <- records$ent_id
recordIds <- records$rec_id
numRecords <- dim(records)[1]
linkingFields     <- c("fname_c1", "lname_c1", "by", "bm", "bd")
stringdist.match <- c("fname_c1", "lname_c1")
partial.match <- c("fname_c1")
out <- fastLink(dfA = records,
dfB = records,
varnames = linkingFields,
stringdist.match = stringdist.match,
partial.match = NULL,
return.all = TRUE)
# can look at summary output
summary(out)
matches <- data.table(cbind(out$matches$inds.a, out$matches$inds.b))
head(matches)
dim(matches)[1]
## True Positives, False Positives, and False Negatives:
TP <- sum(records$ent_id[matches$V1] == records$ent_id[matches$V2])
FP <- sum(records$ent_id[matches$V1] != records$ent_id[matches$V2])
FN <- dim(matches)[1] - TP
TP <- sum(records$ent_id[matches$V1] == records$ent_id[matches$V2])
FP <- sum(records$ent_id[matches$V1] != records$ent_id[matches$V2])
FN <- dim(matches)[1] - TP
library(fastLink)
library(tidyverse)
source("evaluationMetricsFastLink.R")
library(fastLink)
library(tidyverse)
source("evaluationMetricsFastLink.R")
library(fastLink)
library(tidyverse)
source("evaluationMetricsFastLink.R")
